#you know, it's kind of annoying having
#height in cm let's convert to meters
df$height = df$height/100
complete.cases(df)
df = df[complete.cases(df),]
df.highBMI = subset(df, BMI>25)
View(df.highBMI)
df.normalBMI = subset(df, BMI>18.5 && BMI<25)
View(df.normalBMI)
df.normalBMI = subset(df, BMI>18.5 & BMI<25)
View(df.normalBMI)
df.normalBMI = subset(df, BMI>18.5 && BMI<25)
View(df.normalBMI)
df.lowBMI = subset(df, BMI<18.5)
View(df.lowBMI)
View(df)
df$BMI_cat = replicate(length(df$BMI), "normal")
View(df)
df$BMI>25
df$BMI_cat[df$BMI>25] = "high"
exampDatFilePath = "C:/Users/Adam Dede/Documents/GitHub/CogChalAnalysis/CogChalData/PARTICIPANT_Cognitive Challenge Test_2021-02-18_11h06.57.168.csv"
#read the data in
exampDatFilePath
exampDat = read.csv(exampDatFilePath)
head(exampDat)
unique(exampDat$trialType)
data = array(rnorm(300,0,10), c(100,2))
data2 = array(runif(100,0,10), c(50,2))
hist(data[,1])
sd(data[,1])
results = array(dim = c(length(data[,1], length(data[1,]))))
data = array(rnorm(300,0,10), c(100,2))
results = array(dim = c(length(data[,1], length(data[1,]))))
results = array(dim = c(length(data[,1]), length(data[1,])))
View(results)
View(results)
results[,1] = (data[,1] - mean(data[,1])) / sd(data[,1])
View(results)
View(results)
for(ii in 1:length(data[1,])){
results[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
#results[,2] = (data[,2] - mean(data[,2])) / sd(data[,2])
}
View(results)
outliers = replicate(length(data[,1]), 0)
for(ii in 1:length(data[,1])){
if(data[ii,1]>-2){
outliers[ii] = 1
}
if(data[ii,1]<2){
outliers[ii] = 1
}
if(data[ii,2]>-2){
outliers[ii] = 1
}
if(data[ii,2]<2){
outliers[ii] = 1
}
}
outliers
outliers = replicate(length(data[,1]), 0)
for(ii in 1:length(data[,1])){
if(data[ii,1]<-2){
outliers[ii] = 1
}
if(data[ii,1]<2){
outliers[ii] = 1
}
if(data[ii,2]<-2){
outliers[ii] = 1
}
if(data[ii,2]<2){
outliers[ii] = 1
}
}
outliers
outliers = replicate(length(data[,1]), 0)
for(ii in 1:length(data[,1])){
if(results[ii,1]<-2){
outliers[ii] = 1
}
if(results[ii,1]<2){
outliers[ii] = 1
}
if(results[ii,2]<-2){
outliers[ii] = 1
}
if(results[ii,2]<2){
outliers[ii] = 1
}
}
outliers
View(results)
results = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do each column as a vectorized problem
for(ii in 1:length(data[1,])){
results[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
#results[,2] = (data[,2] - mean(data[,2])) / sd(data[,2])
}
View(results)
length(data[1,])
ii = 1
results[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
View(results)
data = array(rnorm(300,0,10), c(100,2))
results = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do each column as a vectorized problem
for(ii in 1:length(data[1,])){
results[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
#results[,2] = (data[,2] - mean(data[,2])) / sd(data[,2])
}
outliers = replicate(length(data[,1]), 0)
for(ii in 1:length(data[,1])){
if(results[ii,1]<-2){
outliers[ii] = 1
}
if(results[ii,1]<2){
outliers[ii] = 1
}
if(results[ii,2]<-2){
outliers[ii] = 1
}
if(results[ii,2]<2){
outliers[ii] = 1
}
}
results = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do each column as a vectorized problem
for(ii in 1:length(data[1,])){
results[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
#results[,2] = (data[,2] - mean(data[,2])) / sd(data[,2])
}
outliers = replicate(length(data[,1]), 0)
for(ii in 1:length(data[,1])){
if(results[ii,1]< -2){
outliers[ii] = 1
}
if(results[ii,1]<2){
outliers[ii] = 1
}
if(results[ii,2]< -2){
outliers[ii] = 1
}
if(results[ii,2]<2){
outliers[ii] = 1
}
}
outliers
length(data[,1])
(results[ii,1]< -2)
(results[ii,1]<2)
(results[ii,1]>2)
outliers = replicate(length(data[,1]), 0)
for(ii in 1:length(data[,1])){
if(results[ii,1]< -2){
outliers[ii] = 1
}
if(results[ii,1]>2){
outliers[ii] = 1
}
if(results[ii,2]< -2){
outliers[ii] = 1
}
if(results[ii,2]>2){
outliers[ii] = 1
}
}
outliers
outputArray = array(c(data,outliers),
dim = c(length(data[,1]), length(data[1,])+1))
View(outputArray)
removeOutliers = function(data){
#make a new array the same size as the input array
results = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do each column as a vectorized problem
for(ii in 1:length(data[1,])){
results[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
#results[,2] = (data[,2] - mean(data[,2])) / sd(data[,2])
}
#then make a new vector of 1s and 0s
#1 = one of the items in this row is an outlier
#0 = neither of the items in this row is an outlier
#An outlier is defined as +-2 z-score
outliers = replicate(length(data[,1]), 0)
for(ii in 1:length(data[,1])){
if(results[ii,1]< -2){
outliers[ii] = 1
}
if(results[ii,1]>2){
outliers[ii] = 1
}
if(results[ii,2]< -2){
outliers[ii] = 1
}
if(results[ii,2]>2){
outliers[ii] = 1
}
}
#make a new array with the original data as the first two colunns
#make your outlier indicator variable be the third column
outputArray = array(c(data,outliers),
dim = c(length(data[,1]), length(data[1,])+1))
#return the new array
return(outputArray)
}
removeOutliers(data)
abs(-2)
zScoreArray = array(dim = c(leanth(data[,1]), length(data[1,])))
zScoreArray = array(dim = c(length(data[,1]), length(data[1,])))
data = array(rnorm(300,0,10), c(100,2))
data2 = array(runif(100,0,10), c(50,2))
zScoreArray = array(dim = c(length(data[,1]), length(data[1,])))
View(zScoreArray)
zScoreArray[,1] = data[,1] - mean(data[,1]) / sd(data[,1])
View(zScoreArray)
zScoreArray[,1] = (data[,1] - mean(data[,1])) / sd(data[,1])
hist(zScoreArray[,1])
zScoreArray[,1] = data[,1] - mean(data[,1]) / sd(data[,1])
hist(zScoreArray[,1])
zScoreArray[,1] = (data[,1] - mean(data[,1])) / sd(data[,1])
hist(zScoreArray[,1])
zScoreArray[,2] = (data[,2] - mean(data[,2])) / sd(data[,2])
zScoreArray = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do two vectorized calculations:
for(ii in 1:length(data[1,])){
zScoreArray[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
# zScoreArray[,2] = (data[,2] - mean(data[,2])) / sd(data[,2])
}
hist(zScoreArray[,1])
hist(zScoreArray[,2])
results = replicate(length(data[,1]), 0)
for(ii in 1:length(data[,1])){
if(zScoreArray[ii,1]>2){
results[ii] = 1
}
if(zScoreArray[ii,1]<-2){
results[ii] = 1
}
if(zScoreArray[ii,2]>2){
results[ii] = 1
}
if(zScoreArray[ii,2]<-2){
results[ii] = 1
}
}
results
x = 2
2->y
y<-7
View(zScoreArray)
zScoreArray = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do two vectorized calculations:
for(ii in 1:length(data[1,])){
zScoreArray[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
}
results = replicate(length(data[,1]), 0)
#1 = one of the items in this row is an outlier
#0 = neither of the items in this row is an outlier
#An outlier is defined as +-2 z-score
for(ii in 1:length(data[,1])){
if(zScoreArray[ii,1]>2){
results[ii] = 1
}
if(zScoreArray[ii,1]< -2){
results[ii] = 1
}
if(zScoreArray[ii,2]>2){
results[ii] = 1
}
if(zScoreArray[ii,2]< -2){
results[ii] = 1
}
}
results
outPutArray = array(c(data,results),
c(length(data[,1]), length(data[1,])+1))
View(outPutArray)
removeOutliers = function(data){
#make a new array the same size as the input array
zScoreArray = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do two vectorized calculations:
for(ii in 1:length(data[1,])){
zScoreArray[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
}
#then make a new vector of 1s and 0s
results = replicate(length(data[,1]), 0)
#1 = one of the items in this row is an outlier
#0 = neither of the items in this row is an outlier
#An outlier is defined as +-2 z-score
for(ii in 1:length(data[,1])){
if(zScoreArray[ii,1]>2){
results[ii] = 1
}
if(zScoreArray[ii,1]< -2){
results[ii] = 1
}
if(zScoreArray[ii,2]>2){
results[ii] = 1
}
if(zScoreArray[ii,2]< -2){
results[ii] = 1
}
}
#make a new array with the original data as the first two colunns
#make your outlier indicator variable be the third column
outPutArray = array(c(data,results),
c(length(data[,1]), length(data[1,])+1))
#return the new array
return(outPutArray)
}
removeOutliers(data)
removeOutliers(data2)
hist(data2[,1])
hist(data2[,2])
sd(data2[,1])
2.7*2
mean(data2[,1])
zScoreArray = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do two vectorized calculations:
for(ii in 1:length(data[1,])){
zScoreArray[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
}
#then make a new vector of 1s and 0s
results = replicate(length(data[,1]), 0)
#1 = one of the items in this row is an outlier
#0 = neither of the items in this row is an outlier
#An outlier is defined as +-2 z-score
for(ii in 1:length(data[,1])){
if(zScoreArray[ii,1]>2 |
zScoreArray[ii,1]< -2 |
zScoreArray[ii,2]>2 |
zScoreArray[ii,2]< -2){
results[ii] = 1
}
# if(zScoreArray[ii,1]< -2){
#   results[ii] = 1
# }
# if(zScoreArray[ii,2]>2){
#   results[ii] = 1
# }
# if(zScoreArray[ii,2]< -2){
#   results[ii] = 1
# }
}
#make a new array with the original da
results
results = replicate(length(data[,1]), 0)
#1 = one of the items in this row is an outlier
#0 = neither of the items in this row is an outlier
#An outlier is defined as +-2 z-score
for(ii in 1:length(data[,1])){ #loop over rows
for(kk in 1:length(data[1,])){
if(zScoreArray[ii,kk]>2 |
zScoreArray[ii,kk]< -2){
results[ii] = 1
}
}
}
results
data3 = array(rnorm(300,0,10), c(100,3))
View(data3)
View(data3)
removeOutliers = function(data){
#make a new array the same size as the input array
zScoreArray = array(dim = c(length(data[,1]), length(data[1,])))
#fill the new array with the within column z-scores of the data
#I'm going to do two vectorized calculations:
for(ii in 1:length(data[1,])){
zScoreArray[,ii] = (data[,ii] - mean(data[,ii])) / sd(data[,ii])
}
#then make a new vector of 1s and 0s
results = replicate(length(data[,1]), 0)
#1 = one of the items in this row is an outlier
#0 = neither of the items in this row is an outlier
#An outlier is defined as +-2 z-score
for(ii in 1:length(data[,1])){ #loop over rows
for(kk in 1:length(data[1,])){ #loop over columns
if(zScoreArray[ii,kk]>2 |
zScoreArray[ii,kk]< -2){
results[ii] = 1
}
}
}
# if(zScoreArray[ii,1]< -2){
#   results[ii] = 1
# }
# if(zScoreArray[ii,2]>2){
#   results[ii] = 1
# }
# if(zScoreArray[ii,2]< -2){
#   results[ii] = 1
# }
#}
#make a new array with the original data as the first two colunns
#make your outlier indicator variable be the third column
outPutArray = array(c(data,results),
c(length(data[,1]), length(data[1,])+1))
#return the new array
return(outPutArray)
}
removeOutliers(data3)
heights=c(160,182,165,170,158,173,189)
weights=c(60 ,105,100, NaN, 70, 69, 85)
df = data.frame('height' = heights, 'weight' = weights)
View(df)
df$subID = seq(1,length(heights), 1)
df$height
df$weight
df$BMI = df$weight/(df$height/100)^2
df$height = df$height/100
complete.cases(df)
df = df[complete.cases(df),]
df.highBMI = subset(df, BMI>25)
df.normalBMI = subset(df, BMI>18.5 & BMI<25)
df.lowBMI = subset(df, BMI<18.5)
View(df.highBMI)
View(df.lowBMI)
View(df.normalBMI)
df$BMI_cat = replicate(length(df$BMI), "normal")
df$BMI_cat[df$BMI>25] = "high"
exampDatFilePath = "C:/Users/Adam Dede/Documents/GitHub/CogChalAnalysis/CogChalData/PARTICIPANT_Cognitive Challenge Test_2021-02-18_11h06.57.168.csv"
exampDat = read.csv(exampDatFilePath)
View(exampDat)
View(exampDat)
head(exampDat)
trialTypes = unique(exampDat$trialType)
trialTrypes
trialTypes
2356/60
datFilePath = '~\\GitHub\\CogChalAnalysis\\CogChalData'
#set the program to open the specified folder
setwd(filePath)
#list out character vectors of all the files in the specified folder
datFiles = list.files()
datFilePath = '~\\GitHub\\CogChalAnalysis\\CogChalData'
#set the program to open the specified folder
setwd(datFilePath)
datFiles = list.files()
datFiles
allDat <- vector(mode = "list", length = length(datFiles))
for(ii in 1:length(datFiles)){
allDat[[ii]] = read.csv(datFiles[ii])
}
View(allDat)
View(allDat)
dates = vector(mode = 'list', length = n);
n = length(allData)
df <- data.frame('date' = replicate(n,0))
dates = vector(mode = 'list', length = n);
n = length(allDat)
df <- data.frame('date' = replicate(n,0))
dates = vector(mode = 'list', length = n);
ii = 1
curDat = allDat[[ii]]
View(curDat)
dates = vector(mode = 'list', length = n);
for(ii in 1:n){
curDat = allDat[[ii]]
dates[[ii]] = curDat$date[1]
}
df$date = dates
View(df)
View(df)
datFilePath = '~\\GitHub\\CogChalAnalysis\\CogChalData'
setwd(datFilePath)
datFiles = list.files()
datFiles
allDat <- vector(mode = "list", length = length(datFiles))
View(allDat)
View(allDat)
allDat <- vector(mode = "list", length = length(datFiles))
for(ii in 1:length(datFiles)){
allDat[[ii]] = read.csv(datFiles[ii])
}
View(allDat)
View(allDat)
replicate(n,0)
n = length(allDat)
replicate(n,0)
df = data.frame("date" = replicate(n,0))
View(df)
View(df)
ii = 4
curDat = allDat[[ii]]
View(curDat)
View(curDat)
n = length(allDat)
df = data.frame("date" = replicate(n,0))
for(ii in 1:n){
curDat = allDat[[ii]]
df$date[ii] = curDat$date
}
warnings()
curDat$date
n = length(allDat)
df = data.frame("date" = replicate(n,0))
for(ii in 1:n){
curDat = allDat[[ii]]
df$date[ii] = curDat$date[1]
}
test = read.csv('AdamFull_AB_pic_singleT2_2021_Mar_30_1355', sep = "auto")
setwd("~/GitHub/AB_pic/data")
test = read.csv('AdamFull_AB_pic_singleT2_2021_Mar_30_1355', sep = "auto")
test = read.csv('AdamFull_AB_pic_singleT2_2021_Mar_30_1355.csv', sep = "auto")
